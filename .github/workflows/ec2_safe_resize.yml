name: EC2 Safe Resizer
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-deployment]

jobs:
  go_no_go_with_ai_recomendations:
    runs-on: ubuntu-latest
    outputs:
      decision_output: ${{ steps.decision_step.outputs.decision }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Recommendation Artifact from S3
        run: |
            aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/artifact/resize_recommendation.json resize_recommendation.json
         
      - name: Extract Decision from JSON
        id: decision_step
        run: |
          DECISION=$(jq -r '.decision' resize_recommendation.json)
          echo "Decision extracted: $DECISION"
          echo "decision=$DECISION" >> $GITHUB_OUTPUT

      - name: Go OR No-Go
        run: echo "Not progressing further because the decision was to retain the current config by AI"
        
  take_snapshot:
    runs-on: ubuntu-latest
    needs: go_no_go_with_ai_recomendations
    if: ${{ needs.go_no_go_with_ai_recomendations.outputs.decision_output != 'retain' }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Take Snapshot
        run: echo "Taking a snapshot because the decision was not retain the current config by AI."

      - name: Read input.json and set variables
        id: read_json
        run: |
          echo "Reading input.json..."
          INSTANCE_ID=$(jq -r '.instance_id' input.json)
          REGION=$(jq -r '.region' input.json)
          echo "$INSTANCE_ID"
          echo "$REGION"

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "REGION=${REGION}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install boto3

      - name: Take Snapshots & Prepare Rollback Data
        run: |
          python scripts/snapshots_and_save_rollback.py "$INSTANCE_ID" "$REGION"

      - name: Print Rollback Data
        run: cat rollback.json

      - name: Upload Rollback Data to S3
        run: |
          aws s3 cp rollback.json s3://${{ env.S3_BUCKET_NAME }}/rollback/${INSTANCE_ID}_rollback.json
          
  resize:
    runs-on: ubuntu-latest
    needs: take_snapshot
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Read input.json and set variables
        id: read_json
        run: |
          echo "Reading input.json..."
          INSTANCE_ID=$(jq -r '.instance_id' input.json)
          REGION=$(jq -r '.region' input.json)
          echo "$INSTANCE_ID"
          echo "$REGION"

          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "REGION=${REGION}" >> $GITHUB_ENV

      - name: Download Recommendation Artifact from S3
        run: |
            aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/artifact/resize_recommendation.json resize_recommendation.json
          
      - name: Perform Safe Resize
        run: python scripts/resize_ec2.py

  trigger_rollback:
    runs-on: ubuntu-latest
    needs: resize
    if: failure()
    permissions:
      contents: write
    steps:
      - name: Trigger Rollback Workflow via repository_dispatch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'rollback-trigger',
              client_payload: {
                reason: 'The "Perform Safe Resize" job failed.'
              }
            });

      - name: Notify (Optional)
        if: always()
        run: echo "Instance resized. Notification system can be integrated here."
